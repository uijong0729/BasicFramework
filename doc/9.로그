1.소프트웨어 특성
	- 비가시성 : 로그를 통해 추척
	- 복잡성
	- 변경성 (장점)
	- 순응성 (장점)
	- 무형성 (장점)
	- 복제성 
	- 개발

2.소프트웨어 위기
	- 하드웨어 구현비용 < 소프트웨어 개발비용

3.소프트웨어 비가시성 문제
	- 로그파일 : 비즈니스로직 -> 로그파일 <- 개발자
	- 여러 WAS 로그파일의 동기화 문제 : 성능 저하 우려
	- 로그파일은 운영 관점에서 부담이 점점 커질 수 있다. 

4.로그 기능
	- 무엇을 기록할 것인가
		# 스트링 객체
		# Exception 객체 (StackTrace)
		# 로그 레벨
		# 시간정보, 로그인 정보, 호출 서비스 정보, 쓰레드 정보 (어느 쓰레드의 처리인지)
	- 어디에 기록할 것인가
		# 로그파일 경합 
			## 프로세스1의 점유 -> 기록
			## 프로세스2의 기록 대기
		# 로그파일 경합 회피 
	- 어떻게 기록할 것인가
		# Rolling : 로그파일의 크기가 너무 커지면 로깅를 중단하고 새로운 로그파일 준비
		# 로그파일의 용량을 체크하는 것 자체가 시스템의 부담이 될 수 있으므로 로그 파일의 크기는 정확한 규격을 정하지 않음
		# 프레임워크에서만 사용할 로그와 개발자가 사용할 로그의 분리
		# 로그 동기화 비용을 최소화 해야함
	- 어떻게 사용할 것인가
		# 멀티쓰레드 환경
			## 로그 경합회피 (WAS가 실행하는 포트정보로 확인)
			## System.out.println() : 유용하지만 운영환경에서는 불필요한 객체
			## WAS관점의 로그 : TraceRunner
			## AOP관점의 로그 : Trace
		# 단일쓰레드 환경
	- 로그 레벨
	
	
	