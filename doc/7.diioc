■비즈니스 로직을 재사용할 수 있는 DI와 IoC를 구현합니다.

1. 객체생성
 - 클래스 지향방법
 	기능과 데이터가 컴파일 시점에 결정
 	링킹(정적 바인딩) -> 정적 생성, 성능 지향 (물론 그렇게 빨라지진 않음)
 	
 - 객체 지향 방법
 	기능과 데이터가 실행 시점에 결정
 	리플렉션(동적 바인딩) -> 동적 생성, 유연성, 성능 저하
 	보통 바인딩 정보는 XML을 많이 사용
 	
 2. 객체 전달
 	- 파라메터
 	- 멤버 객체, 전역 객체
 	- ThreadLocal
 
 3. 주입, 의존, 제어
 	- A에 B를 주입한다 : B의 기능을 이용할 수 있도록 준비한다.
 	- A가 B에 의존한다 : A가 B의 기능을 이용한다.
 	- A가 B를 제어한다 : B를 생성하고 B의 기능을 이용할 수 있도록 준비하고 실행결과를 마무리한다. 
 
 4. 의존성 주입 (DI, Dependency Injection)
 	■ 의존성 주입
 		- 어떤 기능을 사용할지 알려준다.
 		- 기능과 데이터가 실행 시점에 결정될 때 사용되는 바인딩 정보

 	■ 역전제어 (IoC : Inversion of Control)
 		- 제어를 개발자가 하지 않는다(개발자는 객체의 생성/사용/반환을 명시하지 않는다)
 		- 프로그램이 객체를 생성/사용/반환을 수행한다(생명주기 관리를 프로그램이 알아서 해준다)
 	
 5. 비즈니스 로직 재사용
 	- 비즈니스 로직 : 공통기능 + 요구사항
 	- 비즈니스 로직 재사용
 		# 역전제어
 		# 공통기능의 생성, 사용, 마무리
 		