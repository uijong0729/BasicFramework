1.작동하는 소프트웨어
	■ 구형 소프트웨어
		- 완벽한 분석 -> 완벽한 설계 -> 완벽한 구현 -> 완벽한 테스트
		- 작동하는 소프트웨어 : 배포비용이 너무 크다
			코드 -> 컴파일 -> 실행파일 -> 배포 -> 설치 -> 실행
	■ 작동하는 소프트웨어의 변화 
		- 코드 -> HTML(브라우저) -> 실행

2.작동하는 소프트웨어를 쉽게 만들 수 있도록 준비합니다.
	■ 자바 서블릿
		자바언어로 인터넷 프로그래밍을 쉽게 할 수 있는 추상화된 기능
			- 추상화 : 표현하는 코드, javax.servlet.*
			- 실체화 : 작동하는 코드, C/public/tomcat/lib/servlet-api.jar
	■ MVC아키텍쳐 스타일
		- MVC아키텍쳐 : 모델 / 뷰 / 컨트롤러를 동시에 개발하는 것
		- S/W위기 해결 -> MVC아키텍쳐 스타일 도입으로인한 재사용으로 소프트웨어 위기라는 개념이 희미해졌다.
	■ 백엔드 프레임워크
		- 절반만 만들어진 작동하는 소프트웨어
		- 입력/출력, 트랜잭션, SQL, 인증/접근제어, 암호화, 로그
		- 비기능 품질속성 : 개발자의 요구사항들을 만족 
		- 라이브러리, 프레임워크, 플랫폼
			~ 라이브러리 : 기능이 뭉쳐져 있는 것
			~ 프레임워크 : 바로 실행할 수 있는 것
			~ 플랫폼 : 사용자와 S/W사이에서 사용자의 기능요구를 중재해주는 것
			
3.바퀴를 다시 발명하지 말아라
	■ 기존에 잘 만들어진 라이브러리를 사용해라(?)
		- 이론 : SW추상화, 트랜잭션, 정보보호, 비기능품질속성 등 공학적 제시
		- 구현 : ???? (이미 잘 만들어진 기능은 잘 사용하지만 개발에 대한 지식이 얕아진다)
		- 제공 : 라이브러리, 프레임워크, 플랫폼
		- 작동하는 S/W : 서비스
 	■ 업무상 실전은 라이브러리를 활용 그러나 공부는 바퀴를 발명하겠다는 의지로
	